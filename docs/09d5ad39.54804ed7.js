(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{64:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return l})),o.d(n,"metadata",(function(){return c})),o.d(n,"toc",(function(){return r})),o.d(n,"default",(function(){return d}));var a=o(3),t=o(7),s=(o(0),o(89)),l={id:"examples",title:"Examples"},c={unversionedId:"examples",id:"examples",isDocsHomePage:!1,title:"Examples",description:"console.animation",source:"@site/docs/examples.md",slug:"/examples",permalink:"/avant-garde/docs/examples",editUrl:"https://github.com/shreyasm-dev/avant-garde/edit/master/docusaurus/docs/examples.md",version:"current",sidebar:"sidebar",previous:{title:"Community",permalink:"/avant-garde/docs/community"}},r=[{value:"<code>console.animation</code>",id:"consoleanimation",children:[]},{value:"<code>console.json</code>",id:"consolejson",children:[]},{value:"<code>console.log</code>",id:"consolelog",children:[]},{value:"<code>console.newline()</code>",id:"consolenewline",children:[]},{value:"<code>console.progress()</code>",id:"consoleprogress",children:[]}],i={toc:r};function d(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},i,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h3",{id:"consoleanimation"},Object(s.b)("inlineCode",{parentName:"h3"},"console.animation")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"console.animation( // Play an animation\n  [ // Animation frames\n    '-',\n    '--',\n    '---',\n    '----',\n    '-----',\n    '------',\n    '-------',\n    '--------',\n    '---------',\n    '----------',\n    '-----------',\n  ],\n  100, // Every frame should be shown for 100 ms\n\n  // This will be called after every frame is shown\n  (iteration) => iteration !== 10, // If a falsy value is returned, the animation will stop\n);\n")),Object(s.b)("h3",{id:"consolejson"},Object(s.b)("inlineCode",{parentName:"h3"},"console.json")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"console.json( // Pretty-print and syntax highlight some JSON\n  {\n    a: 1,\n    b: 2,\n    c: 3,\n  },\n  2, // Indentation size\n);\n")),Object(s.b)("h3",{id:"consolelog"},Object(s.b)("inlineCode",{parentName:"h3"},"console.log")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"// Same as regular console.log except for the fact that the function returns what it logs\nconsole.log('Hello,', 'World!'); // Output: Hello, World!\n")),Object(s.b)("h3",{id:"consolenewline"},Object(s.b)("inlineCode",{parentName:"h3"},"console.newline()")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"// Semantic way of printing a new line\nconsole.newline();\n")),Object(s.b)("h3",{id:"consoleprogress"},Object(s.b)("inlineCode",{parentName:"h3"},"console.progress()")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"console.progress(\n  35, // Percentage\n  '=', // Character used in progress bar\n  100, // Number of columns the progress bar should take at 100% (default is full width of the terminal)\n);\n\nconsole.newline(); // A new line has to printed later to avoid the progress bar being erased\n")))}d.isMDXComponent=!0}}]);